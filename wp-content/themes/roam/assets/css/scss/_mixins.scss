//layout mixins - start

@mixin mkdfTableLayout() {
    position: relative;
    display: table;
    table-layout: fixed;
    height: 100%;
    width: 100%;
}

@mixin mkdfTableCellLayout() {
    position: relative;
    display: table-cell;
    height: 100%;
    width: 100%;
    vertical-align: middle;
}

@mixin mkdfRelativeHolderLayout() {
    position: relative;
    display: inline-block;
    width: 100%;
    vertical-align: middle;
}

@mixin mkdfAbsoluteHolderLayout() {
    position: absolute;
    display: block;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
}

@mixin mkdfTypographyLayout() {
    color: inherit;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    font-style: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    text-transform: inherit;
}

//layout mixins - end

//transition mixins - start

@mixin mkdfTransition($transition-param...) {
    -webkit-transition: $transition-param;
    -moz-transition: $transition-param;
    transition: $transition-param;
}

@mixin mkdfTransform($transform-param...) {
    -webkit-transform: $transform-param;
    -moz-transform: $transform-param;
    transform: $transform-param;
}

@mixin mkdfAnimation($animation-param...) {
    -webkit-animation: $animation-param;
    -moz-animation: $animation-param;
    animation: $animation-param;
}

@mixin mkdfTransformOrigin($animation-param...) {
    -webkit-transform-origin: $animation-param;
    -moz-transform-origin: $animation-param;
    transform-origin: $animation-param;
}

@mixin mkdfBckImageStyle(){
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center center;
}

@mixin mkdfPlaceholder {
    &::-webkit-input-placeholder {
        @content
    }
    &:-moz-placeholder {
        @content
    }
    &::-moz-placeholder {
        @content
    }
    &:-ms-input-placeholder {
        @content
    }
}

%checkbox-style{
    input[type=checkbox]{
        width: 17px;
        height: 17px;
        top: 0;
        left: 0;
        margin: 0 0 16px;
    }
    input[type=checkbox] + label{
        vertical-align: top;
        display: inline-block;
        pointer-events: none;
        cursor: pointer;
    }
    input[type=checkbox] + label span.mkdf-label-text {
        padding-left: 8px;
    }
    input[type=checkbox] + label .mkdf-label-view{
        width: 15px;
        height: 15px;
        position: absolute;
        top: 0;
        left: 0;
        cursor: pointer;
        border: 1px solid $default-border-color;
        background-color: $default-background-color;
        border-radius: 2px;
        &:hover{
            cursor: pointer;
        }
    }
    input[type=checkbox] + label .mkdf-label-view:after{
        content: '';
        width: 7px;
        height: 7px;
        position: absolute;
        top: 4px;
        left: 4px;
        background-color: $first-main-color;
        opacity: 0;
        @include mkdfTransition(opacity 0.3s ease-in-out);
    }

    input[type=checkbox]:checked + label .mkdf-label-view:after{
        opacity: 1;
    }
}

//transition mixins - end

/* Button mixins - start */
@mixin mkdfButtonDefaultStyle() {
    border-radius: 0;
    font-family: inherit;
    position: relative;
    display: inline-block;
    vertical-align: middle;
    width: auto;
    outline: none;
    font-size: 14px;
    line-height: 2em;
    letter-spacing: 0.05em;
    font-weight: 700;
    text-transform: uppercase;
    box-sizing: border-box;
    margin: 0;
    @include mkdfTransition(all .2s cubic-bezier(0.215, 0.61, 0.355, 1));
}

@mixin mkdfButtonTransparentColor() {
    color: $default-text-color;
    background-color: transparent;
}

@mixin mkdfButtonSolidColor() {
    color: #fff;
    background-color: $first-main-color;
    border: 1px solid transparent;
}

@mixin mkdfButtonSolidHoverColor() {
    color: #fff;
    background-color: $default-heading-color;
}

@mixin mkdfButtonOutlineColor() {
    color: $first-main-color;
    background-color: transparent;
    border: 1px solid $first-main-color;
}

@mixin mkdfButtonOutlineHoverColor() {
    color: #fff;
    background-color: $first-main-color;
    border-color: $first-main-color;
}

@mixin mkdfButtonSmallParams() {
    padding: 11px 36px;
}

@mixin mkdfButtonMediumParams() {
    padding: 13px 46px;
}

@mixin mkdfButtonLargeParams() {
    padding: 13px 56px;
}

@mixin mkdfButtonHugeParams() {
    display: block;
    text-align: center;
    padding: 13px 26px;
}

/* Button mixins - end */

//vertical menu
@mixin vertical-menu-laptop-wide-landscape {
    @media only screen and (min-width: $vertical-menu-laptop-landscape) and (max-width: $vertical-menu-laptop-wide-landscape) {
        @content;
    }
}


@mixin vertical-menu-laptop-landscape {
    @media only screen and (min-width: $vertical-menu-ipad-landscape) and (max-width: $vertical-menu-laptop-landscape) {
        @content;
    }
}

@mixin vertical-menu-ipad-landscape {
    @media only screen and (min-width: $ipad-landscape) and (max-width: $vertical-menu-ipad-landscape) {
        @content;
    }
}

//media query mixins - start

@mixin laptop-landscape-large {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-large)) {
        @content;
    }
}

@mixin laptop-landscape-medium {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape-medium)) {
        @content;
    }
}

@mixin laptop-landscape {
    @media only screen and (max-width: map-get($breakpoints, laptop-landscape)) {
        @content;
    }
}

@mixin ipad-landscape {
    @media only screen and (max-width: map-get($breakpoints, ipad-landscape)) {
        @content;
    }
}

@mixin ipad-portrait {
    @media only screen and (max-width: map-get($breakpoints, ipad-portrait)) {
        @content;
    }
}

@mixin phone-landscape {
    @media only screen and (max-width: map-get($breakpoints, phone-landscape)) {
        @content;
    }
}

@mixin phone-portrait {
    @media only screen and (max-width: map-get($breakpoints, phone-portrait)) {
        @content;
    }
}

@mixin phone-portrait-minus-pixel {
    @media only screen and (max-width: map-get($breakpoints, phone-portrait-minus-pixel)) {
        @content;
    }
}

@mixin smaller-phone-portrait {
    @media only screen and (max-width: map-get($breakpoints, smaller-phone-portrait)) {
        @content;
    }
}

//media query mixins - end

//animation mixin - start

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content
    }
;
    @keyframes #{$name} {
        @content
    }
;
}

@mixin animation($name, $duration, $repeat, $timing, $delay) {
    -webkit-animation-name: $name;
    -webkit-animation-duration: $duration;
    -webkit-animation-iteration-count: $repeat;
    -webkit-animation-timing-function: $timing;
    -webkit-animation-delay: $delay;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    animation-name: $name;
    animation-duration: $duration;
    animation-iteration-count: $repeat;
    animation-timing-function: $timing;
    animation-delay: $delay;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}

//animation mixin - end